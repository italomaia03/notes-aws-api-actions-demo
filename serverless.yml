# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: notes-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
    name: aws
    runtime: nodejs18.x

    # you can overwrite defaults here
    stage: ${opt:stage, 'dev'}
    region: us-east-1
    environment:
        COGNITO_USERPOOL_ID: !Ref cognitoUserPool
        COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

functions:
    authorizer:
        handler: authorizer.handler
        environment:
            COGNITO_USERPOOL_ID: !Ref cognitoUserPool
            COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

    createNote:
        handler: handler.createNote
        environment:
            NOTES_TABLE_NAME: !Ref notesTable
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:PutItem
              Resource: !GetAtt notesTable.Arn
        events:
            - http:
                  method: post
                  path: notes
                  authorizer:
                      name: userpool_authorizer
                      type: COGNITO_USER_POOLS
                      arn: !GetAtt cognitoUserPool.Arn
    updateNote:
        handler: handler.updateNote
        environment:
            NOTES_TABLE_NAME: !Ref notesTable
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:UpdateItem
              Resource: !GetAtt notesTable.Arn
        events:
            - http:
                  method: put
                  path: notes/{id}
                  authorizer:
                      name: userpool_authorizer
                      type: COGNITO_USER_POOLS
                      arn: !GetAtt cognitoUserPool.Arn
    getNotes:
        handler: handler.getNotes
        environment:
            NOTES_TABLE_NAME: !Ref notesTable
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:Scan
              Resource: !GetAtt notesTable.Arn
        events:
            - http:
                  method: get
                  path: notes
                  authorizer:
                      name: userpool_authorizer
                      type: COGNITO_USER_POOLS
                      arn: !GetAtt cognitoUserPool.Arn
    getNote:
        handler: handler.getNote
        events:
            - http:
                  method: get
                  path: notes/{id}
    deleteNote:
        handler: handler.deleteNote
        environment:
            NOTES_TABLE_NAME: !Ref notesTable
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:DeleteItem
              Resource: !GetAtt notesTable.Arn
        events:
            - http:
                  method: delete
                  path: notes/{id}
                  authorizer:
                      name: userpool_authorizer
                      type: COGNITO_USER_POOLS
                      arn: !GetAtt cognitoUserPool.Arn

plugins:
    - serverless-iam-roles-per-function

# you can add CloudFormation resource templates here
resources:
    Resources: ${file(resources.yml)}
