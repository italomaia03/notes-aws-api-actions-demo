# notes DynamoDB table
notesTable:
    Type: AWS::DynamoDB::Table
    Properties:
        TableName: notes-${self:provider.stage}
        AttributeDefinitions:
            - AttributeName: notesId
              AttributeType: S
        KeySchema:
            - AttributeName: notesId
              KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
# Cognito user pool
cognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
        UserPoolName: MyNotesUP-${self:provider.stage}

# User pool web client
cognitoUserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        UserPoolId: !Ref cognitoUserPool
        ClientName: web
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
            - phone
            - email
            - profile
            - openid
        AllowedOAuthFlows:
            - implicit
        SupportedIdentityProviders:
            - COGNITO
        ExplicitAuthFlows:
            - ALLOW_ADMIN_USER_PASSWORD_AUTH
            - ALLOW_USER_SRP_AUTH
            - ALLOW_CUSTOM_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
        CallbackURLs:
            - http://localhost:3000

#User pool domain
cognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
        UserPoolId: !Ref cognitoUserPool
        Domain: testnotescd-${self:provider.stage}
# Application Parameter

# userPoolIdParam:
#     Type: AWS::SSM::Parameter
#     Properties:
#         Name: /notes/dev/userPoolId
#         Type: String
#         Tier: Standard
#         Value: !GetAtt cognitoUserPool.Arn
